# Carregar a geometria do município de Recife
recife_sf <- read_municipality(code_muni = 2611606, year = 2022)
# Verificar se 'ruas_gwrv$SDF' é um objeto sf, caso contrário, convertê-lo
if (!inherits(ruas_gwrf$SDF, "sf")) {
ruas_gwrf$SDF <- st_as_sf(ruas_gwrf$SDF)
}
# Verificar se o CRS está ausente e definir um CRS apropriado (EPSG:4326)
if (is.na(st_crs(ruas_gwrf$SDF))) {
ruas_gwrf$SDF <- st_set_crs(ruas_gwrf$SDF, 4326) # Define o CRS como WGS 84
}
# Agora você pode continuar com o plot para a variável 'gwr.e'
ggplot() +
# Mapa do município de Recife
geom_sf(data = recife_sf, fill = "gray60", color = "black") +
# Adicionar os pontos da análise GWR com base na variável 'gwr.e'
geom_sf(data = ruas_gwrf$SDF, aes(color = gwr.e), size = 2, alpha = 0.5) +
# Paleta de cores para a variável 'gwr.e', considerando valores negativos e positivos
scale_color_gradient2(low = "red", mid = "white", high = "blue",
midpoint = 0, name = "Erro") +
# Tema minimalista
theme_bw() +
# Adicionar título e ajustar layout
# labs(title = "Erro de Previsão - Análise GWR") +
# Adicionar seta de norte e escala
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2)
# 7.10. Mapear 'gwr.e' COM os bairros
# Carregar os pacotes necessários
library(geobr)
library(ggplot2)
library(ggspatial) # Acoplar Seta Norte
library(sf) # Para lidar com dados espaciais
# Carregar a geometria do município de Recife
recife_sf <- read_municipality(code_muni = 2611606, year = 2022)
# Carregar a geometria dos bairros de Recife (ano 2010)
bairros_recife <- read_neighborhood(year = 2010)
# Filtrar para o município de Recife
bairros_recife <- subset(bairros_recife, code_muni == 2611606)
# Verificar se 'ruas_gwrv$SDF' é um objeto sf, caso contrário, convertê-lo
if (!inherits(ruas_gwrf$SDF, "sf")) {
ruas_gwrf$SDF <- st_as_sf(ruas_gwrf$SDF)
}
# Verificar se o CRS está ausente e definir um CRS apropriado (EPSG:4326)
if (is.na(st_crs(ruas_gwrf$SDF))) {
ruas_gwrf$SDF <- st_set_crs(ruas_gwrf$SDF, 4326) # Define o CRS como WGS 84
}
# Agora você pode continuar com o plot para a variável 'gwr.e'
ggplot() +
# Mapa do município de Recife
geom_sf(data = recife_sf, fill = "gray60", color = "black") +
# Adicionar os bairros de Recife
geom_sf(data = bairros_recife, fill = NA, color = "black", linetype = "solid", size = 0.5) +
# Adicionar os pontos da análise GWR com base na variável 'gwr.e'
geom_sf(data = ruas_gwrf$SDF, aes(color = gwr.e), size = 2, alpha = 0.5) +
# Paleta de cores para a variável 'gwr.e', considerando valores negativos e positivos
scale_color_gradient2(low = "red", mid = "white", high = "blue",
midpoint = 0, name = "Erro") +
# Tema minimalista
theme_bw() +
# Adicionar título e ajustar layout
# labs(title = "Erro de Previsão - Análise GWR") +
# Adicionar seta de norte e escala
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2)
# 8. Previsão (Recife Antigo)
# AREA = 250
# WC = 2
# VAGA = 5
# LOG = -34.8703833
# LAT = -8.0511000
# 8.1. Definir as coordenadas do ponto de interesse
ponto_interesse <- st_sf(st_sfc(st_point(c(-34.8703833, -8.0511000))), crs = 4326)
# 8.2. Encontrar o ponto mais próximo no conjunto 'ruas_gwrv'
distancias <- st_distance(ponto_interesse, st_as_sf(ruas_gwrf$SDF))
indice_mais_proximo <- which.min(distancias)
# 8.3. Extrair os coeficientes da regressão GWR para o ponto mais próximo
coef_intercepto <- ruas_gwrf$SDF$`(Intercept)`[indice_mais_proximo]
coef_area <- ruas_gwrf$SDF$AREA[indice_mais_proximo]
coef_wc <- ruas_gwrf$SDF$WC[indice_mais_proximo]
coef_vaga <- ruas_gwrf$SDF$VAGA[indice_mais_proximo]
# 8.4. Fazer a previsão com base nos valores fornecidos para 'AREA' e 'WC'
AREA_valor <- 473
# 8.2. Encontrar o ponto mais próximo no conjunto 'ruas_gwrv'
distancias <- st_distance(ponto_interesse, st_as_sf(ruas_gwrf$SDF))
indice_mais_proximo <- which.min(distancias)
# 8.3. Extrair os coeficientes da regressão GWR para o ponto mais próximo
coef_intercepto <- ruas_gwrf$SDF$`(Intercept)`[indice_mais_proximo]
coef_area <- ruas_gwrf$SDF$AREA[indice_mais_proximo]
coef_wc <- ruas_gwrf$SDF$WC[indice_mais_proximo]
coef_vaga <- ruas_gwrf$SDF$VAGA[indice_mais_proximo]
# 8.4. Fazer a previsão com base nos valores fornecidos para 'AREA' e 'WC'
AREA_valor <- 473
WC_valor <- 5
VAGA_valor <- 10
PRECO_predito_rec <- coef_intercepto + coef_area * AREA_valor + coef_wc * WC_valor + coef_vaga*VAGA_valor
PRECO_predito_rec
# 9. Previsão (Imbiribeira)
# AREA = 250
# WC = 2
# VAGA = 5
# LOG = -34,9107750
# LAT = -8,1092611
# 9.1. Definir as coordenadas do ponto de interesse
ponto_interesse <- st_sf(st_sfc(st_point(c(-34.9107750, -8.1092611))), crs = 4326)
distancias <- st_distance(ponto_interesse, st_as_sf(ruas_gwrf$SDF))
indice_mais_proximo <- which.min(distancias)
# 9.3. Extrair os coeficientes da regressão GWR para o ponto mais próximo
coef_intercepto <- ruas_gwrf$SDF$`(Intercept)`[indice_mais_proximo]
coef_area <- ruas_gwrf$SDF$AREA[indice_mais_proximo]
coef_wc <- ruas_gwrf$SDF$WC[indice_mais_proximo]
coef_vaga <- ruas_gwrf$SDF$VAGA[indice_mais_proximo]
# 9.4. Fazer a previsão com base nos valores fornecidos para 'AREA' e 'WC'
AREA_valor <- 473
WC_valor <- 5
VAGA_valor <- 10
PRECO_predito_imb <- coef_intercepto + coef_area * AREA_valor + coef_wc * WC_valor + coef_vaga*VAGA_valor
PRECO_predito_imb
# 10. Previsão (Várzea)
# AREA = 250
# WC = 2
# VAGA = 5
# LOG = -34,9597166
# LAT = -8,0484388
# 10.1. Definir as coordenadas do ponto de interesse
ponto_interesse <- st_sf(st_sfc(st_point(c(-34.9597166, -8.0484388))), crs = 4326)
# 10.2. Encontrar o ponto mais próximo no conjunto 'ruas_gwrv'
distancias <- st_distance(ponto_interesse, st_as_sf(ruas_gwrf$SDF))
indice_mais_proximo <- which.min(distancias)
# 10.3. Extrair os coeficientes da regressão GWR para o ponto mais próximo
coef_intercepto <- ruas_gwrf$SDF$`(Intercept)`[indice_mais_proximo]
coef_area <- ruas_gwrf$SDF$AREA[indice_mais_proximo]
coef_wc <- ruas_gwrf$SDF$WC[indice_mais_proximo]
coef_vaga <- ruas_gwrf$SDF$VAGA[indice_mais_proximo]
# 10.4. Fazer a previsão com base nos valores fornecidos para 'AREA' e 'WC'
AREA_valor <- 473
WC_valor <- 5
VAGA_valor <- 10
PRECO_predito_var <- coef_intercepto + coef_area * AREA_valor + coef_wc * WC_valor + coef_vaga*VAGA_valor
PRECO_predito_var
# 11. Mapas das Inferências
# 11.1. Carregar a geometria do município de Recife e Bairros
recife_sf <- read_municipality(code_muni = 2611606, year = 2022)
# Verificar se 'ruas_gwrv$SDF' é um objeto sf, caso contrário, convertê-lo
if (!inherits(ruas_gwrf$SDF, "sf")) {
ruas_gwrf$SDF <- st_as_sf(ruas_gwrf$SDF)
}
# Verificar se o CRS está ausente e definir um CRS apropriado (EPSG:4326)
if (is.na(st_crs(ruas_gwrf$SDF))) {
ruas_gwrf$SDF <- st_set_crs(ruas_gwrf$SDF, 4326) # Define o CRS como WGS 84
}
# 11.2. Criar um data frame com as previsões
previsoes <- data.frame(
bairro = c("Recife Antigo", "Imbiribeira", "Várzea"),
log = c(-34.8703833, -34.9107750, -34.9597166),
lat = c(-8.0511000, -8.1092611, -8.0484388),
preco_predito = c(PRECO_predito_rec, PRECO_predito_imb, PRECO_predito_var) # Use os valores previstos
)
# 11.3. Transformar o data frame em um objeto sf
previsoes_sf <- st_as_sf(previsoes, coords = c("log", "lat"), crs = 4326)
# 11.4. Plotar o mapa com as previsões
ggplot() +
geom_sf(data = recife_sf, fill = "lightgray", color = "black") + # Mapa de Recife
geom_sf(data = previsoes_sf, aes(size = preco_predito), shape = 21, fill = "red") + # Pontos das previsões
geom_text(data = previsoes, aes(x = log, y = lat, label = round(preco_predito, 2)),
vjust = -1, color = "darkblue", size = 4) + # Adiciona os rótulos das previsões
labs(size = "Preço Predito")+ # Renomeia a legenda de tamanho
# Adicionar seta de norte e escala
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2)+
theme_bw()
# 12. Mapas das Inferências c/ Bairros
# 12.1. Carregar a geometria do município de Recife e Bairros
recife_sf <- read_municipality(code_muni = 2611606, year = 2022)
# Carregar a geometria dos bairros de Recife (ano 2010)
bairros_recife <- read_neighborhood(year = 2010)
# Filtrar para o município de Recife
bairros_recife <- subset(bairros_recife, code_muni == 2611606)
# Verificar se 'ruas_gwrv$SDF' é um objeto sf, caso contrário, convertê-lo
if (!inherits(ruas_gwrf$SDF, "sf")) {
ruas_gwrf$SDF <- st_as_sf(ruas_gwrf$SDF)
}
# Verificar se o CRS está ausente e definir um CRS apropriado (EPSG:4326)
if (is.na(st_crs(ruas_gwrf$SDF))) {
ruas_gwrf$SDF <- st_set_crs(ruas_gwrf$SDF, 4326) # Define o CRS como WGS 84
}
# 12.2. Criar um data frame com as previsões
previsoes <- data.frame(
bairro = c("Recife Antigo", "Imbiribeira", "Várzea"),
log = c(-34.8703833, -34.9107750, -34.9597166),
lat = c(-8.0511000, -8.1092611, -8.0484388),
preco_predito = c(PRECO_predito_rec, PRECO_predito_imb, PRECO_predito_var) # Use os valores previstos
)
# 12.3. Transformar o data frame em um objeto sf
previsoes_sf <- st_as_sf(previsoes, coords = c("log", "lat"), crs = 4326)
# 12.4. Plotar o mapa com as previsões
ggplot() +
geom_sf(data = recife_sf, fill = "lightgray", color = "black") + # Mapa de Recife
geom_sf(data = bairros_recife, fill = NA, color = "black") + # Bairros de Recife
geom_sf(data = previsoes_sf, aes(size = preco_predito), shape = 21, fill = "red") + # Pontos das previsões
geom_text(data = previsoes, aes(x = log, y = lat, label = round(preco_predito, 2)),
vjust = -1, color = "darkblue", size = 4) + # Adiciona os rótulos das previsões
labs(size = "Preço Predito")+ # Renomeia a legenda de tamanho
# Adicionar seta de norte e escala
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2)+
theme_bw()
# 2. Ler os dados do Excel (valores de arrendamento por rua)
dados_bairros <- read_excel("RECIFE_400.xlsx", sheet = 4)
dados_bairros
# 3. Agrupar por bairro
dados_bairros <- dados_bairros %>%
group_by(BAIRRO) %>%
summarise(COD_M = mean(COD,na.rm = T), n=n(), VALOR_M = mean(VALOR, na.rm = T),
AREA_M = mean(AREA, na.rm = T), M2_M = mean(M2, na.rm = T), WC_M = mean(WC,na.rm = T),
VAGA_M = mean(VAGA, na.rm = T)) %>%
arrange(desc(n))
dados_bairros # Vamos agora adicionar as poligonais dos bairros para poder plotar a planilha num mapa
# 4. Shapefile dos bairros do Recife e Poligonal
# 4.1. Carregar a geometria do município de Recife - Pacote 'geobr'
recife_sf <- read_municipality(code_muni = 2611606, year = 2022)
# 4.2. Carregar a geometria de todos os bairros do Brasil (ano 2010)
bairros_recife <- read_neighborhood(year = 2010)
# 4.3. Filtrar para os bairros do município de Recife
bairros_recife <- subset(bairros_recife, code_muni == 2611606)
head(bairros_recife)
View(bairros_recife)
View(bairros_recife)
# 5. Verificar e corrigir estruturas e fazer o 'left join' entre 'dados_bairros' e 'bairros_recife'
# 5.1. Vefificar e fazer possíveis correções nas estruturas dos arquivos
str(dados_bairros) # dados da planilha
str(bairros_recife) # dados do geobr
bairros_recife$code_neighborhood <- as.numeric(bairros_recife$code_neighborhood)
str(bairros_recife)
# 5.2. Agora sim, vamos para a junção
dados_bairros <- bairros_recife %>%
left_join(dados_bairros, by = c("code_neighborhood" = "COD_M"))
head(dados_bairros)
# 6. Plotagem de Mapas Temáticos
# 6.1. Mapa da distribuição espacial do valor médio do aluguel (R$/unid)
library(ggspatial)
ggplot() +
geom_sf(data = dados_bairros, aes(fill = VALOR_M))+
scale_fill_distiller(palette = "Reds", direction = 1, name = "R$/imóvel",
limits = c())+ # relaciona-se à distribuição de cores
# labs(title = "Aluguel Médio (R$/imóvel)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
# 6.2. Mapa da distribuição espacial do valor médio do m² (R$/m²)
ggplot() +
geom_sf(data = dados_bairros, aes(fill = M2_M))+
scale_fill_distiller(palette = "Blues", direction = 1, name = "R$/m²",
limits = c())+ # relaciona-se à distribuição de cores
# labs(title = "Aluguel Médio (R$/m²)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
# 6.3. Mapa da distribuição espacial dos tamanhos médios dos imóveis (m²)
ggplot() +
geom_sf(data = dados_bairros, aes(fill = AREA_M))+
scale_fill_distiller(palette = "Greens", direction = 1, name = "Área (m²)",
limits = c())+ # relaciona-se à distribuição de cores
# labs(title = "Tamanhos Médios (m²)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
# 6.4. Mapa da distribuição espacial das vagas
ggplot() +
geom_sf(data = dados_bairros, aes(fill = VAGA_M))+
scale_fill_distiller(palette = "Oranges", direction = 1, name = "Vagas",
limits = c())+ # relaciona-se à distribuição de cores
# labs(title = "Nº Médio de Vagas")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
# 6.5. Mapa da distribuição espacial dos WC
ggplot() +
geom_sf(data = dados_bairros, aes(fill = WC_M))+
scale_fill_distiller(palette = "Purples", direction = 1, name = "WC",
limits = c())+ # relaciona-se à distribuição de cores
# labs(title = "Nº Médio de WC")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
# 7. Juntando os gráficos
# Pacotes Extras (para ladear gráficos ou um em baixo do outro)
if(!require(patchwork))install.packages("patchwork")
library(patchwork)
if(!require(magrittr))install.packages("magrittr")
library(magrittr)
G_valor <- ggplot() +
geom_sf(data = dados_bairros, aes(fill = VALOR_M))+
scale_fill_distiller(palette = "Reds", direction = 1, name = "R$/imóvel.",
limits = c())+
# labs(title = "Aluguel Médio (R$/imóvel)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
G_valor
G_m2 <- ggplot() +
geom_sf(data = dados_bairros, aes(fill = M2_M))+
scale_fill_distiller(palette = "Reds", direction = 1, name = "R$/m²",
limits = c())+
# labs(title = "Aluguel Médio (R$/m²)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
G_m2
G_area <- ggplot() +
geom_sf(data = dados_bairros, aes(fill = AREA_M))+
scale_fill_distiller(palette = "Greens", direction = 1, name = "Área (m²)",
limits = c())+
# labs(title = "Tamanhos Médios (m²)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
G_area
G_vaga <- ggplot() +
geom_sf(data = dados_bairros, aes(fill = VAGA_M))+
scale_fill_distiller(palette = "Oranges", direction = 1, name = "Vagas",
limits = c())+
# labs(title = "Nº Médio de Vagas")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
G_vaga
G_wc <- ggplot() +
geom_sf(data = dados_bairros, aes(fill = WC_M))+
scale_fill_distiller(palette = "Purples", direction = 1, name = "WC",
limits = c())+
# labs(title = "Nº Médio de WC")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
G_wc
# Combinando os gráficos num único arcabouço
(G_vaga + G_wc)/(G_area + G_valor)
if(!require(dplyr))install.packages("dplyr")
library(dplyr)
if(!require(ggplot2))install.packages("ggplot2")
library(ggplot2)
if(!require(corrplot))install.packages("corrplot")
library(corrplot)
if(!require(PerformanceAnalytics))install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
if(!require(ggthemes))install.packages("ggthemes")
library(ggthemes)
if(!require(readxl))install.packages("readxl")
library(readxl)
if(!require(sf))install.packages("sf")
library(sf)
if(!require(spgwr))install.packages("spgwr")
library(spgwr)
if(!require(tmap))install.packages("tmap")
library(tmap)
if(!require(geobr))install.packages("geobr")
library(geobr)
if(!require(ggspatial))install.packages("ggspatial")
library(ggspatial)
# 2. Ler os dados do Excel (valores de arrendamento por rua)
dados_bairros <- read_excel("RECIFE_400.xlsx", sheet = 4)
dados_bairros
# 3. Agrupar por bairro
dados_bairros <- dados_bairros %>%
group_by(BAIRRO) %>%
summarise(COD_M = mean(COD,na.rm = T), n=n(), VALOR_M = mean(VALOR, na.rm = T),
AREA_M = mean(AREA, na.rm = T), M2_M = mean(M2, na.rm = T), WC_M = mean(WC,na.rm = T),
VAGA_M = mean(VAGA, na.rm = T)) %>%
arrange(desc(n))
dados_bairros # Vamos agora adicionar as poligonais dos bairros para poder plotar a planilha num mapa
# 4. Shapefile dos bairros do Recife e Poligonal
# 4.1. Carregar a geometria do município de Recife - Pacote 'geobr'
recife_sf <- read_municipality(code_muni = 2611606, year = 2022)
# 4.2. Carregar a geometria de todos os bairros do Brasil (ano 2010)
bairros_recife <- read_neighborhood(year = 2010)
# 4.3. Filtrar para os bairros do município de Recife
bairros_recife <- subset(bairros_recife, code_muni == 2611606)
head(bairros_recife)
# 5. Verificar e corrigir estruturas e fazer o 'left join' entre 'dados_bairros' e 'bairros_recife'
# 5.1. Vefificar e fazer possíveis correções nas estruturas dos arquivos
str(dados_bairros) # dados da planilha
str(bairros_recife) # dados do geobr
bairros_recife$code_neighborhood <- as.numeric(bairros_recife$code_neighborhood)
str(bairros_recife)
# 5.2. Agora sim, vamos para a junção
dados_bairros <- bairros_recife %>%
left_join(dados_bairros, by = c("code_neighborhood" = "COD_M"))
head(dados_bairros)
# 6. Plotagem de Mapas Temáticos
# 6.1. Mapa da distribuição espacial do valor médio do aluguel (R$/unid)
library(ggspatial)
ggplot() +
geom_sf(data = dados_bairros, aes(fill = VALOR_M))+
scale_fill_distiller(palette = "Reds", direction = 1, name = "R$/imóvel",
limits = c())+ # relaciona-se à distribuição de cores
# labs(title = "Aluguel Médio (R$/imóvel)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
# 6.2. Mapa da distribuição espacial do valor médio do m² (R$/m²)
ggplot() +
geom_sf(data = dados_bairros, aes(fill = M2_M))+
scale_fill_distiller(palette = "Blues", direction = 1, name = "R$/m²",
limits = c())+ # relaciona-se à distribuição de cores
# labs(title = "Aluguel Médio (R$/m²)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
# 6.3. Mapa da distribuição espacial dos tamanhos médios dos imóveis (m²)
ggplot() +
geom_sf(data = dados_bairros, aes(fill = AREA_M))+
scale_fill_distiller(palette = "Greens", direction = 1, name = "Área (m²)",
limits = c())+ # relaciona-se à distribuição de cores
# labs(title = "Tamanhos Médios (m²)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
# 6.4. Mapa da distribuição espacial das vagas
ggplot() +
geom_sf(data = dados_bairros, aes(fill = VAGA_M))+
scale_fill_distiller(palette = "Oranges", direction = 1, name = "Vagas",
limits = c())+ # relaciona-se à distribuição de cores
# labs(title = "Nº Médio de Vagas")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
# 6.5. Mapa da distribuição espacial dos WC
ggplot() +
geom_sf(data = dados_bairros, aes(fill = WC_M))+
scale_fill_distiller(palette = "Purples", direction = 1, name = "WC",
limits = c())+ # relaciona-se à distribuição de cores
# labs(title = "Nº Médio de WC")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
# 7. Juntando os gráficos
# Pacotes Extras (para ladear gráficos ou um em baixo do outro)
if(!require(patchwork))install.packages("patchwork")
library(patchwork)
if(!require(magrittr))install.packages("magrittr")
library(magrittr)
G_valor <- ggplot() +
geom_sf(data = dados_bairros, aes(fill = VALOR_M))+
scale_fill_distiller(palette = "Reds", direction = 1, name = "R$/imóvel.",
limits = c())+
# labs(title = "Aluguel Médio (R$/imóvel)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
G_valor
G_m2 <- ggplot() +
geom_sf(data = dados_bairros, aes(fill = M2_M))+
scale_fill_distiller(palette = "Reds", direction = 1, name = "R$/m²",
limits = c())+
# labs(title = "Aluguel Médio (R$/m²)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
G_m2
G_area <- ggplot() +
geom_sf(data = dados_bairros, aes(fill = AREA_M))+
scale_fill_distiller(palette = "Greens", direction = 1, name = "Área (m²)",
limits = c())+
# labs(title = "Tamanhos Médios (m²)")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
G_area
G_vaga <- ggplot() +
geom_sf(data = dados_bairros, aes(fill = VAGA_M))+
scale_fill_distiller(palette = "Oranges", direction = 1, name = "Vagas",
limits = c())+
# labs(title = "Nº Médio de Vagas")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
G_vaga
G_wc <- ggplot() +
geom_sf(data = dados_bairros, aes(fill = WC_M))+
scale_fill_distiller(palette = "Purples", direction = 1, name = "WC",
limits = c())+
# labs(title = "Nº Médio de WC")+
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering) +
annotation_scale(location = "br", width_hint = 0.2) +
theme_bw()
G_wc
# Combinando os gráficos num único arcabouço
(G_vaga + G_wc)/(G_area + G_valor)
